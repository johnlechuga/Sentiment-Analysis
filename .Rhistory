install.packages("RQuantLib")
underlying_price = 100
strike_price = 105
time_to_maturity = 1
volatility = 0.2
interest_rate = 0.05
bs_price = EuropeanOption(Type = "call", underlying = underlying_price,
stike = strike_price, expiration = time_to_maturity,
volatility = volatility, riskFreeRate = interest_rate)
underlying_price = 100
strike_price = 105
time_to_maturity = 1
volatility = 0.2
interest_rate = 0.05
bs_price = black_scholes(S = underlying_price, X = strike_price,
Time = time_to_maturity, r - interest_rate,
sigma = volatility, type = "C")
# Define the parameters
underlying_price <- 100  # Current stock price
strike_price <- 105      # Option strike price
time_to_maturity <- 1    # Time to option expiration in years
volatility <- 0.2        # Volatility of the underlying asset
interest_rate <- 0.05    # Risk-free interest rate
# Calculate Black-Scholes option price
bs_price <- black_scholes(S = underlying_price, X = strike_price,
Time = time_to_maturity, r = interest_rate,
sigma = volatility, type = "C")
# Install and load the Deriv package
install.packages("Deriv")
library(Deriv)
# Define the parameters
underlying_price <- 100  # Current stock price
strike_price <- 105      # Option strike price
time_to_maturity <- 1    # Time to option expiration in years
volatility <- 0.2        # Volatility of the underlying asset
interest_rate <- 0.05    # Risk-free interest rate
# Calculate Black-Scholes option price for a call
bs_call_price <- EuropeanOption(Type = "call", underlying = underlying_price,
strike = strike_price, expiration = time_to_maturity,
volatility = volatility, riskFreeRate = interest_rate)
print(bs_call_price$price)
# Calculate Black-Scholes option price for a put
bs_put_price <- EuropeanOption(Type = "put", underlying = underlying_price,
strike = strike_price, expiration = time_to_maturity,
volatility = volatility, riskFreeRate = interest_rate)
print(bs_put_price$price)
# Define the parameters
underlying_price <- 100  # Current stock price
strike_price <- 105      # Option strike price
time_to_maturity <- 1    # Time to option expiration in years
volatility <- 0.2        # Volatility of the underlying asset
interest_rate <- 0.05    # Risk-free interest rate
# Calculate Black-Scholes option price for a call
bs_call_price <- EuropeanOption(Type = "call", underlying = underlying_price,
strike = strike_price, expiration = time_to_maturity,
volatility = volatility, riskFreeRate = interest_rate)
library(RQuantLib)
# Define the parameters
underlying_price <- 100  # Current stock price
strike_price <- 105      # Option strike price
time_to_maturity <- 1    # Time to option expiration in years
volatility <- 0.2        # Volatility of the underlying asset
interest_rate <- 0.05    # Risk-free interest rate
# Calculate Black-Scholes option price for a call
bs_call_price <- EuropeanOption(Type = "call", underlying = underlying_price,
strike = strike_price, expiration = time_to_maturity,
volatility = volatility, dividendYield = 0,
riskFreeRate = interest_rate)
library(RQuantLib)
# Define the parameters
underlying_price <- 100  # Current stock price
strike_price <- 105      # Option strike price
time_to_maturity <- 1    # Time to option expiration in years
volatility <- 0.2        # Volatility of the underlying asset
interest_rate <- 0.05    # Risk-free interest rate
# Calculate Black-Scholes option price for a call
bs_call_price <- EuropeanOption(Type = "call", underlying = underlying_price,
strike = strike_price, expiration = time_to_maturity,
volatility = volatility, dividendYield = 0,
riskFreeRate = interest_rate)
# Install and load the rquantlib package
install.packages("rquantlib")
library(rquantlib)
# Install and load the quantmod package
install.packages("quantmod")
library(quantmod)
# Define the parameters
underlying_price <- 100  # Current stock price
strike_price <- 105      # Option strike price
time_to_maturity <- 1    # Time to option expiration in years
volatility <- 0.2        # Volatility of the underlying asset
interest_rate <- 0.05    # Risk-free interest rate
# Calculate Black-Scholes option price for a call
bs_call_price <- EuropeanOption(type = "call", underlying = underlying_price,
strike = strike_price, expiration = time_to_maturity,
volatility = volatility, interest.rate = interest_rate)
# Install and load the fOptions package
install.packages("fOptions")
# Install and load the ragtop package
install.packages("ragtop")
library(ragtop)
# Define the parameters
underlying_price <- 100  # Current stock price
strike_price <- 105      # Option strike price
time_to_maturity <- 1    # Time to option expiration in years
volatility <- 0.2        # Volatility of the underlying asset
interest_rate <- 0.05    # Risk-free interest rate
# Calculate Black-Scholes option price for a call
bs_call_price <- BS(callput = "call", S = underlying_price, K = strike_price,
T = time_to_maturity, r = interest_rate, sigma = volatility)
# Install and load the quantlib package
install.packages("quantlib")
# Install and load the Deriv package
install.packages("Deriv")
install.packages("Deriv")
library(Deriv)
# Define the parameters
underlying_price <- 100  # Current stock price
strike_price <- 105      # Option strike price
time_to_maturity <- 1    # Time to option expiration in years
volatility <- 0.2        # Volatility of the underlying asset
interest_rate <- 0.05    # Risk-free interest rate
# Calculate Black-Scholes option price for a call
bs_call_price <- BS(type = "c", underlying = underlying_price,
strike = strike_price, expiration = time_to_maturity,
r = interest_rate, volatility = volatility)
# Install and load the rquantlib package
install.packages("rquantlib")
# Install and load the rquantlib package
install.packages("RQuantLib")
library(RQuantLib)
# Define the parameters
underlying_price <- 100  # Current stock price
strike_price <- 105      # Option strike price
time_to_maturity <- 1    # Time to option expiration in years
volatility <- 0.2        # Volatility of the underlying asset
interest_rate <- 0.05    # Risk-free interest rate
# Create a quantlib option object
option <- EuropeanOption(
type = "call",
underlying = underlying_price,
strike = strike_price,
dividendYield = 0,  # Assuming no dividend
volatility = volatility,
riskFreeRate = interest_rate,
maturity = time_to_maturity
)
# Calculate Black-Scholes option price
bs_call_price <- option$price()
# Install and load the fOptions package
install.packages("fOptions")
# Install and load the BSseq package
install.packages("BSseq")
library(BSseq)
# Install and load the sde package
install.packages("sde")
library(sde)
# Define the parameters
underlying_price <- 100  # Current stock price
strike_price <- 105      # Option strike price
time_to_maturity <- 1    # Time to option expiration in years
volatility <- 0.2        # Volatility of the underlying asset
interest_rate <- 0.05    # Risk-free interest rate
# Calculate Black-Scholes option price for a call
bs_call_price <- bsm(S0 = underlying_price, K = strike_price, T = time_to_maturity,
r = interest_rate, sigma = volatility, optiontype = "call")
library(Options)
# Install and load the Options package
install.packages("Options")
# Install and load the fOptions package
install.packages("fOptions")
# Install and load the BSmooth package
install.packages("BSsmooth")
# Define the parameters
underlying_price <- 100  # Current stock price
strike_price <- 105      # Option strike price
time_to_maturity <- 1    # Time to option expiration in years
volatility <- 0.2        # Volatility of the underlying asset
interest_rate <- 0.05    # Risk-free interest rate
# Calculate Black-Scholes option price for a call
d1 <- (log(underlying_price / strike_price) + (interest_rate + 0.5 * volatility^2) * time_to_maturity) / (volatility * sqrt(time_to_maturity))
d2 <- d1 - volatility * sqrt(time_to_maturity)
bs_call_price <- underlying_price * pnorm(d1) - strike_price * exp(-interest_rate * time_to_maturity) * pnorm(d2)
print(bs_call_price)
library(imager)
install.packages("imager")
install.packages("imagerExtra")
install.packages("reticulate")
library(reshape2)
detach("package:reshape2", unload = TRUE)
library(reticulate)
py_install(c("numpy", "scipy", "pandas", "scikit-learn"))
reticulate::repl_python()
pip install seaborn pandas matplotlib
py_install(c("seaborn", "matplotlib"))
quit
py_install(c("seaborn", "matplotlib"))
sns <- import("seaborn")
library(mtcars)
plt <- import("matplotlib.pyplot")
pd <- import("pandas")
mtcars <- datasets::mtcars
mtcars_df <- r_to_py(mtcars)
sns$pairplot(mtcars_df)
plt$show()
setwd("D:/Data Science/Projects/Sentiment Analysis")
